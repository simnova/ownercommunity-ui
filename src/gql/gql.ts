/* eslint-disable */
import * as types from './graphql.ts';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
  'mutation CommunityCreateContainerMutationCommunityCreate($input: CommunityCreateInput!) {\n  communityCreate(input: $input) {\n    ...CommunityCreateContainerMutationCommunityCreateFields\n  }\n}\n\nfragment CommunityCreateContainerMutationCommunityCreateFields on CommunityMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  community {\n    name\n    domain\n    whiteLabelDomain\n    handle\n    publicContentBlobUrl\n    id\n    schemaVersion\n    createdAt\n    updatedAt\n  }\n}':
    types.CommunityCreateContainerMutationCommunityCreateDocument,
  'query CommunityListContainerCommunitiesQuery {\n  communities {\n    ...CommunityListContainerCommunitiesFields\n  }\n}\n\nfragment CommunityListContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  userIsAdmin\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}':
    types.CommunityListContainerCommunitiesQueryDocument,
  'query UserInfoContainerUserCurrentQuery {\n  userCurrent {\n    ...UserInfoContainerCurrentUserFields\n  }\n}\n\nfragment UserInfoContainerCurrentUserFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}':
    types.UserInfoContainerUserCurrentQueryDocument,
  'query AdminCommunityDetailContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunityDetailContainerCommunityFields\n  }\n}\n\nfragment AdminCommunityDetailContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminCommunityDetailContainerCommunityDocument,
  'query AdminCommunityMenuContainerCommunitiesQuery {\n  communities {\n    ...AdminCommunityMenuContainerCommunitiesFields\n  }\n}\n\nfragment AdminCommunityMenuContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}':
    types.AdminCommunityMenuContainerCommunitiesQueryDocument,
  'mutation AdminMembersAccountsAddContainerMemberAccountAdd($input: MemberAccountAddInput!) {\n  memberAccountAdd(input: $input) {\n    ...AdminMembersAccountsAddContainerMemberMutationResultFields\n  }\n}\n\nquery AdminMembersAccountsAddContainerMemberForUser($userId: ObjectID!) {\n  memberForUser(userId: $userId) {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminMembersAccountsAddContainerMemberAccountAddDocument,
  'query AdminMembersAccountsEditContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountEdit($input: MemberAccountEditInput!) {\n  memberAccountEdit(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountRemove($input: MemberAccountRemoveInput!) {\n  memberAccountRemove(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersAccountsEditContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountEditContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}':
    types.AdminMembersAccountsEditContainerMemberDocument,
  'query AdminMembersAccountsListContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountsListContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountsListContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}':
    types.AdminMembersAccountsListContainerMemberDocument,
  'mutation AdminMembersCreateContainerMemberCreate($input: MemberCreateInput!) {\n  memberCreate(input: $input) {\n    ...AdminMembersCreateContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersCreateContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersCreateContainerMember\n  }\n}\n\nfragment AdminMembersCreateContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminMembersCreateContainerMemberCreateDocument,
  'query AdminMembersDetailContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nquery AdminMembersDetailContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminMembersDetailContainerRolesFields\n  }\n}\n\nmutation AdminMembersDetailContainerMemberUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...AdminMembersDetailContainerMutationFields\n  }\n}\n\nfragment AdminMembersDetailContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nfragment AdminMembersDetailContainerMemberFields on Member {\n  memberName\n  role {\n    id\n    roleName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminMembersDetailContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminMembersDetailContainerMemberDocument,
  'query AdminMembersListContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminMembersListContainerMembersFields\n  }\n}\n\nfragment AdminMembersListContainerMembersFields on Member {\n  id\n  memberName\n  role {\n    roleName\n  }\n  createdAt\n  updatedAt\n}':
    types.AdminMembersListContainerMembersDocument,
  'query AdminMembersProfileContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nmutation AdminMembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...AdminMembersProfileContainerMutationFields\n  }\n}\n\nfragment AdminMembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nfragment AdminMembersProfileContainerMemberFields on Member {\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminMembersProfileContainerMemberDocument,
  'query AdminPhotoUploadContainerContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...AdminPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarRemove($memberId: ObjectID!) {\n  memberProfileAvatarRemove(memberId: $memberId) {\n    ...AdminPhotoUploadContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}':
    types.AdminPhotoUploadContainerContainerMemberDocument,
  'mutation AdminPropertiesAddContainerPropertyAdd($input: PropertyAddInput!) {\n  propertyAdd(input: $input) {\n    ...AdminPropertiesAddContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesAddContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyFields on Property {\n  propertyName\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminPropertiesAddContainerPropertyAddDocument,
  'query AdminPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery AdminPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}':
    types.AdminPropertiesDetailContainerPropertyDocument,
  'query AdminPropertiesListContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesListContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminPropertiesListContainerPropertiesDocument,
  'query AdminRolesDeleteContainerRoles {\n  roles {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nmutation AdminRolesDeleteContainerRoleDeleteAndReassign($input: RoleDeleteAndReassignInput!) {\n  roleDeleteAndReassign(input: $input) {\n    ...AdminRolesDeleteContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminRolesDeleteContainerRolesDocument,
  'query AdminRolesDetailContainerRole($Id: ObjectID!) {\n  role(id: $Id) {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleAdd($input: RoleAddInput!) {\n  roleAdd(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleUpdate($input: RoleUpdateInput!) {\n  roleUpdate(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleFields on Role {\n  roleName\n  isDefault\n  permissions {\n    serviceTicketPermissions {\n      canCreateTickets\n      canManageTickets\n      canAssignTickets\n      canWorkOnTickets\n    }\n    communityPermissions {\n      canManageRolesAndPermissions\n      canManageCommunitySettings\n      canManageSiteContent\n      canManageMembers\n      canEditOwnMemberProfile\n      canEditOwnMemberAccounts\n    }\n    propertyPermissions {\n      canManageProperties\n      canEditOwnProperty\n    }\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminRolesDetailContainerRoleDocument,
  'query AdminRolesListContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminRolesListContainerRolesFields\n  }\n}\n\nfragment AdminRolesListContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminRolesListContainerRolesDocument,
  'query AdminServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation AdminServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...AdminServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}':
    types.AdminServiceTicketsCreateContainerMembersDocument,
  'query AdminServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...AdminServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerProperties {\n  properties {\n    ...AdminServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}':
    types.AdminServiceTicketsDetailContainerMembersAssignableToTicketsDocument,
  'query AdminServiceTicketsListContainerServiceTicketsOpenByCommunity($communityId: ID!) {\n  serviceTicketsByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields\n  }\n}\n\nfragment AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminServiceTicketsListContainerServiceTicketsOpenByCommunityDocument,
  'query AdminSettingsGeneralContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSettingsGeneralContainerCommunityFields\n  }\n}\n\nmutation AdminSettingsGeneralContainerCommunityUpdate($input: CommunityUpdateInput!) {\n  communityUpdate(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSettingsGeneralContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSettingsGeneralContainerCommunityFields on Community {\n  name\n  domain\n  domainStatus {\n    verified\n    verification {\n      type\n      domain\n      value\n      reason\n    }\n  }\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminSettingsGeneralContainerCommunityDocument,
  'query AdminSiteEditorFilesListContainerCommunityById($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSiteEditorFilesListContainerCommunityFields\n  }\n}\n\nmutation AdminSiteEditorFilesListContainerCommunityPublicFileRemove($input: CommunityPublicFileRemoveInput!) {\n  communityPublicFileRemove(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesListContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesListContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminSiteEditorFilesListContainerCommunityByIdDocument,
  'mutation AdminSiteEditorFilesUploadContainerCommunityPublicFileCreateAuthHeader($input: CommunityBlobFileInput!) {\n  communityPublicFileCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesUploadContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesUploadContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminSiteEditorFilesUploadContainerCommunityPublicFileCreateAuthHeaderDocument,
  'mutation AdminSiteEditorContainerCommunityPublicContentCreateAuthHeader($input: CommunityBlobContentInput!) {\n  communityPublicContentCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorContainerCommunityFields on Community {\n  name\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}':
    types.AdminSiteEditorContainerCommunityPublicContentCreateAuthHeaderDocument,
  'query MemberPropertyByPropertyId($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    ...PropertyDetailsByPropertyIdFields\n  }\n}\n\nfragment PropertyDetailsByPropertyIdFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  owner {\n    memberName\n  }\n  propertyName\n  propertyType\n  location {\n    address {\n      streetName\n      streetNumber\n      freeformAddress\n    }\n  }\n  listingDetail {\n    additionalAmenities {\n      category\n      amenities\n    }\n    amenities\n    bathrooms\n    bedroomDetails {\n      roomName\n      bedDescriptions\n    }\n    bedrooms\n    description\n    floorPlan\n    floorPlanImages\n    images\n    lease\n    listingAgent\n    listingAgentCompany\n    listingAgentCompanyAddress\n    listingAgentCompanyEmail\n    listingAgentCompanyPhone\n    listingAgentCompanyWebsite\n    listingAgentEmail\n    listingAgentPhone\n    listingAgentWebsite\n    maxGuests\n    price\n    rentHigh\n    rentLow\n    squareFeet\n    video\n  }\n}':
    types.MemberPropertyByPropertyIdDocument,
  'query MemberPropertiesByCommunityId($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...PropertyInformationFields\n  }\n}\n\nfragment PropertyInformationFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  listedInDirectory\n  propertyName\n  propertyType\n  id\n  owner {\n    memberName\n  }\n  listingDetail {\n    bathrooms\n    bedrooms\n    squareFeet\n  }\n  location {\n    address {\n      streetNumber\n      streetName\n    }\n  }\n}':
    types.MemberPropertiesByCommunityIdDocument,
  'query CurrentMemberProfileByCommunityId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nmutation MembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...MembersProfileContainerMutationFields\n  }\n}\n\nfragment MembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nfragment CurrentMemberProfileByCommunityIdFields on Member {\n  profile {\n    avatarDocumentId\n    bio\n    email\n    interests\n    name\n    showEmail\n    showInterests\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n}':
    types.CurrentMemberProfileByCommunityIdDocument,
  'query MemberSiteNeighborsListContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MemberSiteNeighborsListContainerFields\n  }\n}\n\nfragment MemberSiteNeighborsListContainerFields on Member {\n  id\n  memberName\n  accounts {\n    user {\n      id\n      firstName\n    }\n  }\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showProfile\n    showLocation\n    showProperties\n  }\n}':
    types.MemberSiteNeighborsListContainerDocument,
  'query MemberSiteNeighborsListCurrentMemberId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    id\n  }\n}':
    types.MemberSiteNeighborsListCurrentMemberIdDocument,
  'query MemberPhotoUploadContainerContainerMember($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MemberPhotoUploadContainerMemberFields\n  }\n}\n\nmutation MemberPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...MemberPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nfragment MemberPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}':
    types.MemberPhotoUploadContainerContainerMemberDocument,
  'query MembersPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery MembersPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n  tags\n}\n\nfragment MembersPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}':
    types.MembersPropertiesDetailContainerPropertyDocument,
  'mutation MembersPropertiesListingImageUploadContainerPropertyFloorPlanImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyFloorPlanImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesFloorPlanImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesFloorPlanImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    floorPlanImages\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.MembersPropertiesListingImageUploadContainerPropertyFloorPlanImageCreateAuthHeaderDocument,
  'query MemberPropertiesGetAllTags {\n  getAllPropertyTags\n}': types.MemberPropertiesGetAllTagsDocument,
  'query MemberPropertiesListSearchContainerProperties($input: PropertiesSearchInput!) {\n  propertiesSearch(input: $input) {\n    ...MemberPropertiesListSearchContainerPropertyFields\n  }\n}\n\nquery MemberPropertiesListSearchContainerMapSasToken {\n  getMapSasToken\n}\n\nfragment MemberPropertiesListSearchContainerPropertyFields on PropertySearchResult {\n  propertyResults {\n    ...MembersPropertiesListSearchContainerPropertyResultFields\n  }\n  count\n  facets {\n    type {\n      value\n      count\n    }\n    amenities {\n      value\n      count\n    }\n    additionalAmenitiesCategory {\n      value\n      count\n    }\n    additionalAmenitiesAmenities {\n      value\n      count\n    }\n    listedForSale {\n      value\n      count\n    }\n    listedForRent {\n      value\n      count\n    }\n    listedForLease {\n      value\n      count\n    }\n    bedrooms {\n      value\n      count\n    }\n    bathrooms {\n      value\n      count\n    }\n    updatedAt {\n      value\n      count\n    }\n    createdAt {\n      value\n      count\n    }\n    tags {\n      value\n      count\n    }\n  }\n}\n\nfragment MembersPropertiesListSearchContainerPropertyResultFields on PropertyResult {\n  communityId\n  id\n  name\n  type\n  bedrooms\n  amenities\n  additionalAmenities {\n    category\n    amenities\n  }\n  price\n  bathrooms\n  squareFeet\n  position {\n    latitude\n    longitude\n  }\n  images\n  listingAgentCompany\n  address {\n    streetNumber\n    streetName\n    municipality\n    municipalitySubdivision\n    localName\n    countrySecondarySubdivision\n    countryTertiarySubdivision\n    countrySubdivision\n    countrySubdivisionName\n    postalCode\n    extendedPostalCode\n    countryCode\n    country\n    countryCodeISO3\n    freeformAddress\n    streetNameAndNumber\n    routeNumbers\n    crossStreet\n  }\n  listedForSale\n  listedForRent\n  listedForLease\n  updatedAt\n  createdAt\n  tags\n}':
    types.MemberPropertiesListSearchContainerPropertiesDocument,
  'query MembersPropertiesListContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesListContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.MembersPropertiesListContainerPropertiesDocument,
  'mutation MembersPropertiesListingImageUploadContainerPropertyListingImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyListingImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesListingImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesListingImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    images\n  }\n  id\n  createdAt\n  updatedAt\n}':
    types.MembersPropertiesListingImageUploadContainerPropertyListingImageCreateAuthHeaderDocument,
  'query MembersPropertiesListingContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nmutation MembersPropertiesListingContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesListingContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listingDetail {\n    price\n    rentHigh\n    rentLow\n    lease\n    maxGuests\n    bedrooms\n    bedroomDetails {\n      id\n      bedDescriptions\n      roomName\n    }\n    bathrooms\n    squareFeet\n    description\n    amenities\n    additionalAmenities {\n      id\n      category\n      amenities\n    }\n    images\n    video\n    floorPlan\n    floorPlanImages\n    listingAgent\n    listingAgentPhone\n    listingAgentEmail\n    listingAgentWebsite\n    listingAgentCompany\n    listingAgentCompanyPhone\n    listingAgentCompanyEmail\n    listingAgentCompanyWebsite\n    listingAgentCompanyAddress\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersPropertiesListingContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}':
    types.MembersPropertiesListingContainerPropertyDocument,
  'query PropertiesLocationContainerProperty($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    mapSASToken\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nmutation AddressLocationUpdateContainer($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AddressLocationContainerPropertyMutationResultFields\n  }\n}\n\nfragment AddressLocationContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nfragment AddressLocationContainerPropertyFields on Property {\n  id\n  location {\n    address {\n      country\n      countryCode\n      countryCodeISO3\n      countrySecondarySubdivision\n      countrySubdivision\n      countrySubdivisionName\n      countryTertiarySubdivision\n      extendedPostalCode\n      freeformAddress\n      municipality\n      municipalitySubdivision\n      crossStreet\n      localName\n      postalCode\n      streetName\n      streetNumber\n      routeNumbers\n      streetNameAndNumber\n    }\n    position {\n      coordinates\n    }\n  }\n}':
    types.PropertiesLocationContainerPropertyDocument,
  'query MembersServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation MembersServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...MembersServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}':
    types.MembersServiceTicketsCreateContainerMembersDocument,
  'query MembersServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...MembersServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}':
    types.MembersServiceTicketsDetailContainerMembersAssignableToTicketsDocument,
  'query MembersServiceTicketsListContainerServiceTicketsOpenByRequestor {\n  serviceTicketsOpenByRequestor {\n    ...MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields\n  }\n}\n\nquery MemberServiceTicketsListContainerSearchServiceTickets($input: ServiceTicketsSearchInput!) {\n  serviceTicketsSearch(input: $input) {\n    ...MembersServiceTicketsListContainerSearchServiceTicketsFields\n  }\n}\n\nfragment MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsListContainerSearchServiceTicketsFields on ServiceTicketsSearchResult {\n  serviceTicketsResults {\n    ...MemberServiceTicketsListContainerSearchServiceTicketsResultFields\n  }\n  count\n  facets {\n    requestor {\n      value\n      count\n    }\n    assignedTo {\n      value\n      count\n    }\n    status {\n      value\n      count\n    }\n    priority {\n      value\n      count\n    }\n    requestorId {\n      value\n      count\n    }\n    assignedToId {\n      value\n      count\n    }\n  }\n}\n\nfragment MemberServiceTicketsListContainerSearchServiceTicketsResultFields on ServiceTicketsResult {\n  id\n  communityId\n  propertyId\n  title\n  requestor\n  assignedTo\n  requestorId\n  assignedToId\n  description\n  status\n  priority\n  createdAt\n  updatedAt\n}':
    types.MembersServiceTicketsListContainerServiceTicketsOpenByRequestorDocument,
  'query MemberNameServiceTicketContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersNameServiceTicketContainerFields\n  }\n}\n\nquery MemberServiceTicketCustomViews($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nmutation MemberServiceTicketSearchContainerCustomViewsUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...MembersServiceTicketCustomViewsMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketCustomViewsMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nfragment MembersNameServiceTicketContainerFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketCustomViewsFields on Member {\n  id\n  customViews {\n    id\n    name\n    type\n    filters\n    sortOrder\n    columnsToDisplay\n    createdAt\n    updatedAt\n  }\n}':
    types.MemberNameServiceTicketContainerDocument,
  'query MemberSiteCurrentMemberHasAdminRole($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    role {\n      roleName\n    }\n  }\n}':
    types.MemberSiteCurrentMemberHasAdminRoleDocument,
  'query AdminCommunitiesDropdownContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunitiesDropdownContainerCommunityFields\n  }\n}\n\nfragment AdminCommunitiesDropdownContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}':
    types.AdminCommunitiesDropdownContainerCommunityDocument,
  'query LoggedInUserContainerUserCurrentQuery {\n  userCurrent {\n    ...LoggedInUserContainerUserCurrentFields\n  }\n}\n\nfragment LoggedInUserContainerUserCurrentFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}':
    types.LoggedInUserContainerUserCurrentQueryDocument
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation CommunityCreateContainerMutationCommunityCreate($input: CommunityCreateInput!) {\n  communityCreate(input: $input) {\n    ...CommunityCreateContainerMutationCommunityCreateFields\n  }\n}\n\nfragment CommunityCreateContainerMutationCommunityCreateFields on CommunityMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  community {\n    name\n    domain\n    whiteLabelDomain\n    handle\n    publicContentBlobUrl\n    id\n    schemaVersion\n    createdAt\n    updatedAt\n  }\n}'
): (typeof documents)['mutation CommunityCreateContainerMutationCommunityCreate($input: CommunityCreateInput!) {\n  communityCreate(input: $input) {\n    ...CommunityCreateContainerMutationCommunityCreateFields\n  }\n}\n\nfragment CommunityCreateContainerMutationCommunityCreateFields on CommunityMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  community {\n    name\n    domain\n    whiteLabelDomain\n    handle\n    publicContentBlobUrl\n    id\n    schemaVersion\n    createdAt\n    updatedAt\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query CommunityListContainerCommunitiesQuery {\n  communities {\n    ...CommunityListContainerCommunitiesFields\n  }\n}\n\nfragment CommunityListContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  userIsAdmin\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query CommunityListContainerCommunitiesQuery {\n  communities {\n    ...CommunityListContainerCommunitiesFields\n  }\n}\n\nfragment CommunityListContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  userIsAdmin\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query UserInfoContainerUserCurrentQuery {\n  userCurrent {\n    ...UserInfoContainerCurrentUserFields\n  }\n}\n\nfragment UserInfoContainerCurrentUserFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}'
): (typeof documents)['query UserInfoContainerUserCurrentQuery {\n  userCurrent {\n    ...UserInfoContainerCurrentUserFields\n  }\n}\n\nfragment UserInfoContainerCurrentUserFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminCommunityDetailContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunityDetailContainerCommunityFields\n  }\n}\n\nfragment AdminCommunityDetailContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminCommunityDetailContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunityDetailContainerCommunityFields\n  }\n}\n\nfragment AdminCommunityDetailContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminCommunityMenuContainerCommunitiesQuery {\n  communities {\n    ...AdminCommunityMenuContainerCommunitiesFields\n  }\n}\n\nfragment AdminCommunityMenuContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminCommunityMenuContainerCommunitiesQuery {\n  communities {\n    ...AdminCommunityMenuContainerCommunitiesFields\n  }\n}\n\nfragment AdminCommunityMenuContainerCommunitiesFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation AdminMembersAccountsAddContainerMemberAccountAdd($input: MemberAccountAddInput!) {\n  memberAccountAdd(input: $input) {\n    ...AdminMembersAccountsAddContainerMemberMutationResultFields\n  }\n}\n\nquery AdminMembersAccountsAddContainerMemberForUser($userId: ObjectID!) {\n  memberForUser(userId: $userId) {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation AdminMembersAccountsAddContainerMemberAccountAdd($input: MemberAccountAddInput!) {\n  memberAccountAdd(input: $input) {\n    ...AdminMembersAccountsAddContainerMemberMutationResultFields\n  }\n}\n\nquery AdminMembersAccountsAddContainerMemberForUser($userId: ObjectID!) {\n  memberForUser(userId: $userId) {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountsAddContainerMember\n  }\n}\n\nfragment AdminMembersAccountsAddContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminMembersAccountsEditContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountEdit($input: MemberAccountEditInput!) {\n  memberAccountEdit(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountRemove($input: MemberAccountRemoveInput!) {\n  memberAccountRemove(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersAccountsEditContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountEditContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}'
): (typeof documents)['query AdminMembersAccountsEditContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountEdit($input: MemberAccountEditInput!) {\n  memberAccountEdit(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nmutation AdminMembersAccountsEditContainerMemberAccountRemove($input: MemberAccountRemoveInput!) {\n  memberAccountRemove(input: $input) {\n    ...AdminMembersAccountsEditContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersAccountsEditContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersAccountEditContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountEditContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminMembersAccountsListContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountsListContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountsListContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}'
): (typeof documents)['query AdminMembersAccountsListContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersAccountsListContainerMembersFields\n  }\n}\n\nfragment AdminMembersAccountsListContainerMembersFields on Member {\n  accounts {\n    firstName\n    lastName\n    user {\n      id\n      email\n    }\n    statusCode\n    id\n    createdAt\n    updatedAt\n  }\n  id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation AdminMembersCreateContainerMemberCreate($input: MemberCreateInput!) {\n  memberCreate(input: $input) {\n    ...AdminMembersCreateContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersCreateContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersCreateContainerMember\n  }\n}\n\nfragment AdminMembersCreateContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation AdminMembersCreateContainerMemberCreate($input: MemberCreateInput!) {\n  memberCreate(input: $input) {\n    ...AdminMembersCreateContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminMembersCreateContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersCreateContainerMember\n  }\n}\n\nfragment AdminMembersCreateContainerMember on Member {\n  memberName\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminMembersDetailContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nquery AdminMembersDetailContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminMembersDetailContainerRolesFields\n  }\n}\n\nmutation AdminMembersDetailContainerMemberUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...AdminMembersDetailContainerMutationFields\n  }\n}\n\nfragment AdminMembersDetailContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nfragment AdminMembersDetailContainerMemberFields on Member {\n  memberName\n  role {\n    id\n    roleName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminMembersDetailContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminMembersDetailContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nquery AdminMembersDetailContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminMembersDetailContainerRolesFields\n  }\n}\n\nmutation AdminMembersDetailContainerMemberUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...AdminMembersDetailContainerMutationFields\n  }\n}\n\nfragment AdminMembersDetailContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersDetailContainerMemberFields\n  }\n}\n\nfragment AdminMembersDetailContainerMemberFields on Member {\n  memberName\n  role {\n    id\n    roleName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminMembersDetailContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminMembersListContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminMembersListContainerMembersFields\n  }\n}\n\nfragment AdminMembersListContainerMembersFields on Member {\n  id\n  memberName\n  role {\n    roleName\n  }\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminMembersListContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminMembersListContainerMembersFields\n  }\n}\n\nfragment AdminMembersListContainerMembersFields on Member {\n  id\n  memberName\n  role {\n    roleName\n  }\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminMembersProfileContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nmutation AdminMembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...AdminMembersProfileContainerMutationFields\n  }\n}\n\nfragment AdminMembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nfragment AdminMembersProfileContainerMemberFields on Member {\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminMembersProfileContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nmutation AdminMembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...AdminMembersProfileContainerMutationFields\n  }\n}\n\nfragment AdminMembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminMembersProfileContainerMemberFields\n  }\n}\n\nfragment AdminMembersProfileContainerMemberFields on Member {\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminPhotoUploadContainerContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...AdminPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarRemove($memberId: ObjectID!) {\n  memberProfileAvatarRemove(memberId: $memberId) {\n    ...AdminPhotoUploadContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}'
): (typeof documents)['query AdminPhotoUploadContainerContainerMember($id: ID!) {\n  member(id: $id) {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...AdminPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nmutation AdminPhotoUploadContainerMemberProfileAvatarRemove($memberId: ObjectID!) {\n  memberProfileAvatarRemove(memberId: $memberId) {\n    ...AdminPhotoUploadContainerMemberMutationResultFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...AdminPhotoUploadContainerMemberFields\n  }\n}\n\nfragment AdminPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation AdminPropertiesAddContainerPropertyAdd($input: PropertyAddInput!) {\n  propertyAdd(input: $input) {\n    ...AdminPropertiesAddContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesAddContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyFields on Property {\n  propertyName\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation AdminPropertiesAddContainerPropertyAdd($input: PropertyAddInput!) {\n  propertyAdd(input: $input) {\n    ...AdminPropertiesAddContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesAddContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesAddContainerPropertyFields on Property {\n  propertyName\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery AdminPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery AdminPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation AdminPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...AdminPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AdminPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminPropertiesListContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesListContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminPropertiesListContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminPropertiesListContainerPropertyFields\n  }\n}\n\nfragment AdminPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminRolesDeleteContainerRoles {\n  roles {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nmutation AdminRolesDeleteContainerRoleDeleteAndReassign($input: RoleDeleteAndReassignInput!) {\n  roleDeleteAndReassign(input: $input) {\n    ...AdminRolesDeleteContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminRolesDeleteContainerRoles {\n  roles {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nmutation AdminRolesDeleteContainerRoleDeleteAndReassign($input: RoleDeleteAndReassignInput!) {\n  roleDeleteAndReassign(input: $input) {\n    ...AdminRolesDeleteContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDeleteContainerRolesFields\n  }\n}\n\nfragment AdminRolesDeleteContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminRolesDetailContainerRole($Id: ObjectID!) {\n  role(id: $Id) {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleAdd($input: RoleAddInput!) {\n  roleAdd(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleUpdate($input: RoleUpdateInput!) {\n  roleUpdate(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleFields on Role {\n  roleName\n  isDefault\n  permissions {\n    serviceTicketPermissions {\n      canCreateTickets\n      canManageTickets\n      canAssignTickets\n      canWorkOnTickets\n    }\n    communityPermissions {\n      canManageRolesAndPermissions\n      canManageCommunitySettings\n      canManageSiteContent\n      canManageMembers\n      canEditOwnMemberProfile\n      canEditOwnMemberAccounts\n    }\n    propertyPermissions {\n      canManageProperties\n      canEditOwnProperty\n    }\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminRolesDetailContainerRole($Id: ObjectID!) {\n  role(id: $Id) {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleAdd($input: RoleAddInput!) {\n  roleAdd(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nmutation AdminRolesDetailContainerRoleUpdate($input: RoleUpdateInput!) {\n  roleUpdate(input: $input) {\n    ...AdminRolesDetailContainerRoleMutationResultFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleMutationResultFields on RoleMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  role {\n    ...AdminRolesDetailContainerRoleFields\n  }\n}\n\nfragment AdminRolesDetailContainerRoleFields on Role {\n  roleName\n  isDefault\n  permissions {\n    serviceTicketPermissions {\n      canCreateTickets\n      canManageTickets\n      canAssignTickets\n      canWorkOnTickets\n    }\n    communityPermissions {\n      canManageRolesAndPermissions\n      canManageCommunitySettings\n      canManageSiteContent\n      canManageMembers\n      canEditOwnMemberProfile\n      canEditOwnMemberAccounts\n    }\n    propertyPermissions {\n      canManageProperties\n      canEditOwnProperty\n    }\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminRolesListContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminRolesListContainerRolesFields\n  }\n}\n\nfragment AdminRolesListContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminRolesListContainerRoles($communityId: ID!) {\n  rolesByCommunityId(communityId: $communityId) {\n    ...AdminRolesListContainerRolesFields\n  }\n}\n\nfragment AdminRolesListContainerRolesFields on Role {\n  roleName\n  isDefault\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation AdminServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...AdminServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}'
): (typeof documents)['query AdminServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation AdminServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...AdminServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...AdminServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerProperties {\n  properties {\n    ...AdminServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}'
): (typeof documents)['query AdminServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...AdminServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerProperties {\n  properties {\n    ...AdminServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery AdminServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation AdminServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...AdminServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...AdminServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment AdminServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment AdminServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment AdminServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminServiceTicketsListContainerServiceTicketsOpenByCommunity($communityId: ID!) {\n  serviceTicketsByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields\n  }\n}\n\nfragment AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminServiceTicketsListContainerServiceTicketsOpenByCommunity($communityId: ID!) {\n  serviceTicketsByCommunityId(communityId: $communityId) {\n    ...AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields\n  }\n}\n\nfragment AdminServiceTicketsListContainerServiceTicketsOpenByCommunityFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminSettingsGeneralContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSettingsGeneralContainerCommunityFields\n  }\n}\n\nmutation AdminSettingsGeneralContainerCommunityUpdate($input: CommunityUpdateInput!) {\n  communityUpdate(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSettingsGeneralContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSettingsGeneralContainerCommunityFields on Community {\n  name\n  domain\n  domainStatus {\n    verified\n    verification {\n      type\n      domain\n      value\n      reason\n    }\n  }\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminSettingsGeneralContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSettingsGeneralContainerCommunityFields\n  }\n}\n\nmutation AdminSettingsGeneralContainerCommunityUpdate($input: CommunityUpdateInput!) {\n  communityUpdate(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSettingsGeneralContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSettingsGeneralContainerCommunityFields on Community {\n  name\n  domain\n  domainStatus {\n    verified\n    verification {\n      type\n      domain\n      value\n      reason\n    }\n  }\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminSiteEditorFilesListContainerCommunityById($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSiteEditorFilesListContainerCommunityFields\n  }\n}\n\nmutation AdminSiteEditorFilesListContainerCommunityPublicFileRemove($input: CommunityPublicFileRemoveInput!) {\n  communityPublicFileRemove(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesListContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesListContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminSiteEditorFilesListContainerCommunityById($id: ID!) {\n  communityById(id: $id) {\n    ...AdminSiteEditorFilesListContainerCommunityFields\n  }\n}\n\nmutation AdminSiteEditorFilesListContainerCommunityPublicFileRemove($input: CommunityPublicFileRemoveInput!) {\n  communityPublicFileRemove(input: $input) {\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesListContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesListContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation AdminSiteEditorFilesUploadContainerCommunityPublicFileCreateAuthHeader($input: CommunityBlobFileInput!) {\n  communityPublicFileCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesUploadContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesUploadContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation AdminSiteEditorFilesUploadContainerCommunityPublicFileCreateAuthHeader($input: CommunityBlobFileInput!) {\n  communityPublicFileCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorFilesUploadContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorFilesUploadContainerCommunityFields on Community {\n  files {\n    name\n    size\n    type\n    url\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation AdminSiteEditorContainerCommunityPublicContentCreateAuthHeader($input: CommunityBlobContentInput!) {\n  communityPublicContentCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorContainerCommunityFields on Community {\n  name\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation AdminSiteEditorContainerCommunityPublicContentCreateAuthHeader($input: CommunityBlobContentInput!) {\n  communityPublicContentCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    community {\n      ...AdminSiteEditorContainerCommunityFields\n    }\n  }\n}\n\nfragment AdminSiteEditorContainerCommunityFields on Community {\n  name\n  publicContentBlobUrl\n  id\n  schemaVersion\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberPropertyByPropertyId($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    ...PropertyDetailsByPropertyIdFields\n  }\n}\n\nfragment PropertyDetailsByPropertyIdFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  owner {\n    memberName\n  }\n  propertyName\n  propertyType\n  location {\n    address {\n      streetName\n      streetNumber\n      freeformAddress\n    }\n  }\n  listingDetail {\n    additionalAmenities {\n      category\n      amenities\n    }\n    amenities\n    bathrooms\n    bedroomDetails {\n      roomName\n      bedDescriptions\n    }\n    bedrooms\n    description\n    floorPlan\n    floorPlanImages\n    images\n    lease\n    listingAgent\n    listingAgentCompany\n    listingAgentCompanyAddress\n    listingAgentCompanyEmail\n    listingAgentCompanyPhone\n    listingAgentCompanyWebsite\n    listingAgentEmail\n    listingAgentPhone\n    listingAgentWebsite\n    maxGuests\n    price\n    rentHigh\n    rentLow\n    squareFeet\n    video\n  }\n}'
): (typeof documents)['query MemberPropertyByPropertyId($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    ...PropertyDetailsByPropertyIdFields\n  }\n}\n\nfragment PropertyDetailsByPropertyIdFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  owner {\n    memberName\n  }\n  propertyName\n  propertyType\n  location {\n    address {\n      streetName\n      streetNumber\n      freeformAddress\n    }\n  }\n  listingDetail {\n    additionalAmenities {\n      category\n      amenities\n    }\n    amenities\n    bathrooms\n    bedroomDetails {\n      roomName\n      bedDescriptions\n    }\n    bedrooms\n    description\n    floorPlan\n    floorPlanImages\n    images\n    lease\n    listingAgent\n    listingAgentCompany\n    listingAgentCompanyAddress\n    listingAgentCompanyEmail\n    listingAgentCompanyPhone\n    listingAgentCompanyWebsite\n    listingAgentEmail\n    listingAgentPhone\n    listingAgentWebsite\n    maxGuests\n    price\n    rentHigh\n    rentLow\n    squareFeet\n    video\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberPropertiesByCommunityId($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...PropertyInformationFields\n  }\n}\n\nfragment PropertyInformationFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  listedInDirectory\n  propertyName\n  propertyType\n  id\n  owner {\n    memberName\n  }\n  listingDetail {\n    bathrooms\n    bedrooms\n    squareFeet\n  }\n  location {\n    address {\n      streetNumber\n      streetName\n    }\n  }\n}'
): (typeof documents)['query MemberPropertiesByCommunityId($communityId: ID!) {\n  propertiesByCommunityId(communityId: $communityId) {\n    ...PropertyInformationFields\n  }\n}\n\nfragment PropertyInformationFields on Property {\n  listedForLease\n  listedForRent\n  listedForSale\n  listedInDirectory\n  propertyName\n  propertyType\n  id\n  owner {\n    memberName\n  }\n  listingDetail {\n    bathrooms\n    bedrooms\n    squareFeet\n  }\n  location {\n    address {\n      streetNumber\n      streetName\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query CurrentMemberProfileByCommunityId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nmutation MembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...MembersProfileContainerMutationFields\n  }\n}\n\nfragment MembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nfragment CurrentMemberProfileByCommunityIdFields on Member {\n  profile {\n    avatarDocumentId\n    bio\n    email\n    interests\n    name\n    showEmail\n    showInterests\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n}'
): (typeof documents)['query CurrentMemberProfileByCommunityId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nmutation MembersProfileContainerMemberUpdate($input: MemberProfileUpdateInput!) {\n  memberProfileUpdate(input: $input) {\n    ...MembersProfileContainerMutationFields\n  }\n}\n\nfragment MembersProfileContainerMutationFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...CurrentMemberProfileByCommunityIdFields\n  }\n}\n\nfragment CurrentMemberProfileByCommunityIdFields on Member {\n  profile {\n    avatarDocumentId\n    bio\n    email\n    interests\n    name\n    showEmail\n    showInterests\n    showLocation\n    showProfile\n    showProperties\n  }\n  id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberSiteNeighborsListContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MemberSiteNeighborsListContainerFields\n  }\n}\n\nfragment MemberSiteNeighborsListContainerFields on Member {\n  id\n  memberName\n  accounts {\n    user {\n      id\n      firstName\n    }\n  }\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showProfile\n    showLocation\n    showProperties\n  }\n}'
): (typeof documents)['query MemberSiteNeighborsListContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MemberSiteNeighborsListContainerFields\n  }\n}\n\nfragment MemberSiteNeighborsListContainerFields on Member {\n  id\n  memberName\n  accounts {\n    user {\n      id\n      firstName\n    }\n  }\n  profile {\n    name\n    email\n    bio\n    avatarDocumentId\n    interests\n    showInterests\n    showEmail\n    showProfile\n    showLocation\n    showProperties\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberSiteNeighborsListCurrentMemberId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    id\n  }\n}'
): (typeof documents)['query MemberSiteNeighborsListCurrentMemberId($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    id\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberPhotoUploadContainerContainerMember($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MemberPhotoUploadContainerMemberFields\n  }\n}\n\nmutation MemberPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...MemberPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nfragment MemberPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}'
): (typeof documents)['query MemberPhotoUploadContainerContainerMember($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MemberPhotoUploadContainerMemberFields\n  }\n}\n\nmutation MemberPhotoUploadContainerMemberProfileAvatarCreateAuthHeader($input: MemberAvatarImageInput!) {\n  memberProfileAvatarCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    member {\n      ...MemberPhotoUploadContainerMemberFields\n    }\n  }\n}\n\nfragment MemberPhotoUploadContainerMemberFields on Member {\n  profile {\n    avatarDocumentId\n  }\n  id\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery MembersPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n  tags\n}\n\nfragment MembersPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query MembersPropertiesDetailContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nquery MembersPropertiesDetailContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesDetailContainerMembersFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nmutation MembersPropertiesDetailContainerPropertyDelete($input: PropertyDeleteInput!) {\n  propertyDelete(input: $input) {\n    ...MembersPropertiesDetailContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesDetailContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesDetailContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listedForSale\n  listedForRent\n  listedForLease\n  listedInDirectory\n  owner {\n    id\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n  tags\n}\n\nfragment MembersPropertiesDetailContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation MembersPropertiesListingImageUploadContainerPropertyFloorPlanImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyFloorPlanImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesFloorPlanImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesFloorPlanImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    floorPlanImages\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation MembersPropertiesListingImageUploadContainerPropertyFloorPlanImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyFloorPlanImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesFloorPlanImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesFloorPlanImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    floorPlanImages\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberPropertiesGetAllTags {\n  getAllPropertyTags\n}'
): (typeof documents)['query MemberPropertiesGetAllTags {\n  getAllPropertyTags\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberPropertiesListSearchContainerProperties($input: PropertiesSearchInput!) {\n  propertiesSearch(input: $input) {\n    ...MemberPropertiesListSearchContainerPropertyFields\n  }\n}\n\nquery MemberPropertiesListSearchContainerMapSasToken {\n  getMapSasToken\n}\n\nfragment MemberPropertiesListSearchContainerPropertyFields on PropertySearchResult {\n  propertyResults {\n    ...MembersPropertiesListSearchContainerPropertyResultFields\n  }\n  count\n  facets {\n    type {\n      value\n      count\n    }\n    amenities {\n      value\n      count\n    }\n    additionalAmenitiesCategory {\n      value\n      count\n    }\n    additionalAmenitiesAmenities {\n      value\n      count\n    }\n    listedForSale {\n      value\n      count\n    }\n    listedForRent {\n      value\n      count\n    }\n    listedForLease {\n      value\n      count\n    }\n    bedrooms {\n      value\n      count\n    }\n    bathrooms {\n      value\n      count\n    }\n    updatedAt {\n      value\n      count\n    }\n    createdAt {\n      value\n      count\n    }\n    tags {\n      value\n      count\n    }\n  }\n}\n\nfragment MembersPropertiesListSearchContainerPropertyResultFields on PropertyResult {\n  communityId\n  id\n  name\n  type\n  bedrooms\n  amenities\n  additionalAmenities {\n    category\n    amenities\n  }\n  price\n  bathrooms\n  squareFeet\n  position {\n    latitude\n    longitude\n  }\n  images\n  listingAgentCompany\n  address {\n    streetNumber\n    streetName\n    municipality\n    municipalitySubdivision\n    localName\n    countrySecondarySubdivision\n    countryTertiarySubdivision\n    countrySubdivision\n    countrySubdivisionName\n    postalCode\n    extendedPostalCode\n    countryCode\n    country\n    countryCodeISO3\n    freeformAddress\n    streetNameAndNumber\n    routeNumbers\n    crossStreet\n  }\n  listedForSale\n  listedForRent\n  listedForLease\n  updatedAt\n  createdAt\n  tags\n}'
): (typeof documents)['query MemberPropertiesListSearchContainerProperties($input: PropertiesSearchInput!) {\n  propertiesSearch(input: $input) {\n    ...MemberPropertiesListSearchContainerPropertyFields\n  }\n}\n\nquery MemberPropertiesListSearchContainerMapSasToken {\n  getMapSasToken\n}\n\nfragment MemberPropertiesListSearchContainerPropertyFields on PropertySearchResult {\n  propertyResults {\n    ...MembersPropertiesListSearchContainerPropertyResultFields\n  }\n  count\n  facets {\n    type {\n      value\n      count\n    }\n    amenities {\n      value\n      count\n    }\n    additionalAmenitiesCategory {\n      value\n      count\n    }\n    additionalAmenitiesAmenities {\n      value\n      count\n    }\n    listedForSale {\n      value\n      count\n    }\n    listedForRent {\n      value\n      count\n    }\n    listedForLease {\n      value\n      count\n    }\n    bedrooms {\n      value\n      count\n    }\n    bathrooms {\n      value\n      count\n    }\n    updatedAt {\n      value\n      count\n    }\n    createdAt {\n      value\n      count\n    }\n    tags {\n      value\n      count\n    }\n  }\n}\n\nfragment MembersPropertiesListSearchContainerPropertyResultFields on PropertyResult {\n  communityId\n  id\n  name\n  type\n  bedrooms\n  amenities\n  additionalAmenities {\n    category\n    amenities\n  }\n  price\n  bathrooms\n  squareFeet\n  position {\n    latitude\n    longitude\n  }\n  images\n  listingAgentCompany\n  address {\n    streetNumber\n    streetName\n    municipality\n    municipalitySubdivision\n    localName\n    countrySecondarySubdivision\n    countryTertiarySubdivision\n    countrySubdivision\n    countrySubdivisionName\n    postalCode\n    extendedPostalCode\n    countryCode\n    country\n    countryCodeISO3\n    freeformAddress\n    streetNameAndNumber\n    routeNumbers\n    crossStreet\n  }\n  listedForSale\n  listedForRent\n  listedForLease\n  updatedAt\n  createdAt\n  tags\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersPropertiesListContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesListContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query MembersPropertiesListContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersPropertiesListContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  owner {\n    memberName\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'mutation MembersPropertiesListingImageUploadContainerPropertyListingImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyListingImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesListingImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesListingImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    images\n  }\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['mutation MembersPropertiesListingImageUploadContainerPropertyListingImageCreateAuthHeader($input: PropertyBlobFileInput!) {\n  propertyListingImageCreateAuthHeader(input: $input) {\n    authHeader {\n      authHeader\n      blobName\n      blobContainer\n      requestDate\n    }\n    status {\n      success\n      errorMessage\n    }\n    property {\n      ...MembersPropertiesListingImageUploadContainerPropertyFields\n    }\n  }\n}\n\nfragment MembersPropertiesListingImageUploadContainerPropertyFields on Property {\n  listingDetail {\n    images\n  }\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersPropertiesListingContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nmutation MembersPropertiesListingContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesListingContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listingDetail {\n    price\n    rentHigh\n    rentLow\n    lease\n    maxGuests\n    bedrooms\n    bedroomDetails {\n      id\n      bedDescriptions\n      roomName\n    }\n    bathrooms\n    squareFeet\n    description\n    amenities\n    additionalAmenities {\n      id\n      category\n      amenities\n    }\n    images\n    video\n    floorPlan\n    floorPlanImages\n    listingAgent\n    listingAgentPhone\n    listingAgentEmail\n    listingAgentWebsite\n    listingAgentCompany\n    listingAgentCompanyPhone\n    listingAgentCompanyEmail\n    listingAgentCompanyWebsite\n    listingAgentCompanyAddress\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersPropertiesListingContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query MembersPropertiesListingContainerProperty($id: ObjectID!) {\n  property(id: $id) {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nmutation MembersPropertiesListingContainerPropertyUpdate($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...MembersPropertiesListingContainerPropertyMutationResultFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...MembersPropertiesListingContainerPropertyFields\n  }\n}\n\nfragment MembersPropertiesListingContainerPropertyFields on Property {\n  propertyName\n  propertyType\n  listingDetail {\n    price\n    rentHigh\n    rentLow\n    lease\n    maxGuests\n    bedrooms\n    bedroomDetails {\n      id\n      bedDescriptions\n      roomName\n    }\n    bathrooms\n    squareFeet\n    description\n    amenities\n    additionalAmenities {\n      id\n      category\n      amenities\n    }\n    images\n    video\n    floorPlan\n    floorPlanImages\n    listingAgent\n    listingAgentPhone\n    listingAgentEmail\n    listingAgentWebsite\n    listingAgentCompany\n    listingAgentCompanyPhone\n    listingAgentCompanyEmail\n    listingAgentCompanyWebsite\n    listingAgentCompanyAddress\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersPropertiesListingContainerMembersFields on Member {\n  id\n  memberName\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query PropertiesLocationContainerProperty($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    mapSASToken\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nmutation AddressLocationUpdateContainer($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AddressLocationContainerPropertyMutationResultFields\n  }\n}\n\nfragment AddressLocationContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nfragment AddressLocationContainerPropertyFields on Property {\n  id\n  location {\n    address {\n      country\n      countryCode\n      countryCodeISO3\n      countrySecondarySubdivision\n      countrySubdivision\n      countrySubdivisionName\n      countryTertiarySubdivision\n      extendedPostalCode\n      freeformAddress\n      municipality\n      municipalitySubdivision\n      crossStreet\n      localName\n      postalCode\n      streetName\n      streetNumber\n      routeNumbers\n      streetNameAndNumber\n    }\n    position {\n      coordinates\n    }\n  }\n}'
): (typeof documents)['query PropertiesLocationContainerProperty($propertyId: ObjectID!) {\n  property(id: $propertyId) {\n    mapSASToken\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nmutation AddressLocationUpdateContainer($input: PropertyUpdateInput!) {\n  propertyUpdate(input: $input) {\n    ...AddressLocationContainerPropertyMutationResultFields\n  }\n}\n\nfragment AddressLocationContainerPropertyMutationResultFields on PropertyMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  property {\n    ...AddressLocationContainerPropertyFields\n  }\n}\n\nfragment AddressLocationContainerPropertyFields on Property {\n  id\n  location {\n    address {\n      country\n      countryCode\n      countryCodeISO3\n      countrySecondarySubdivision\n      countrySubdivision\n      countrySubdivisionName\n      countryTertiarySubdivision\n      extendedPostalCode\n      freeformAddress\n      municipality\n      municipalitySubdivision\n      crossStreet\n      localName\n      postalCode\n      streetName\n      streetNumber\n      routeNumbers\n      streetNameAndNumber\n    }\n    position {\n      coordinates\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation MembersServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...MembersServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}'
): (typeof documents)['query MembersServiceTicketsCreateContainerMembers($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsCreateContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsCreateContainerPropertyFields\n  }\n}\n\nmutation MembersServiceTicketsCreateContainerServiceTicketCreate($input: ServiceTicketCreateInput!) {\n  serviceTicketCreate(input: $input) {\n    ...MembersServiceTicketsCreateContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsCreateContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsCreateContainerServiceTicketFields on ServiceTicket {\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  title\n  status\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsCreateContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsCreateContainerPropertyFields on Property {\n  id\n  propertyName\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...MembersServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}'
): (typeof documents)['query MembersServiceTicketsDetailContainerMembersAssignableToTickets {\n  membersAssignableToTickets {\n    ...MembersServiceTicketsDetailContainerMemberFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerProperties($communityId: ID!) {\n  propertiesForCurrentUserByCommunityId(communityId: $communityId) {\n    ...MembersServiceTicketsDetailContainerPropertyFields\n  }\n}\n\nquery MembersServiceTicketsDetailContainerServiceTicket($id: ObjectID!) {\n  serviceTicket(id: $id) {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketUpdate($input: ServiceTicketUpdateInput!) {\n  serviceTicketUpdate(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceTicketChangeStatus($input: ServiceTicketChangeStatusInput!) {\n  serviceTicketChangeStatus(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerServiceAssign($input: ServiceTicketAssignInput!) {\n  serviceTicketAssign(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketsDetailContainerAddUpdateActivity($input: ServiceTicketAddUpdateActivityInput!) {\n  serviceTicketAddUpdateActivity(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nmutation MembersServiceTicketDetailContainerServiceTicketDelete($input: ServiceTicketDeleteInput!) {\n  serviceTicketDelete(input: $input) {\n    ...MembersServiceTicketsDetailContainerServiceTicketMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketMutationResultFields on ServiceTicketMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  serviceTicket {\n    ...MembersServiceTicketsDetailContainerServiceTicketFields\n  }\n}\n\nfragment MembersServiceTicketsDetailContainerServiceTicketFields on ServiceTicket {\n  title\n  property {\n    id\n    propertyName\n  }\n  requestor {\n    id\n    memberName\n  }\n  assignedTo {\n    id\n    memberName\n  }\n  title\n  description\n  status\n  priority\n  photos {\n    documentId\n    description\n    id\n    createdAt\n    updatedAt\n  }\n  activityLog {\n    activityType\n    activityDescription\n    activityBy {\n      id\n      memberName\n    }\n    id\n    createdAt\n    updatedAt\n  }\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsDetailContainerMemberFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketsDetailContainerPropertyFields on Property {\n  id\n  propertyName\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MembersServiceTicketsListContainerServiceTicketsOpenByRequestor {\n  serviceTicketsOpenByRequestor {\n    ...MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields\n  }\n}\n\nquery MemberServiceTicketsListContainerSearchServiceTickets($input: ServiceTicketsSearchInput!) {\n  serviceTicketsSearch(input: $input) {\n    ...MembersServiceTicketsListContainerSearchServiceTicketsFields\n  }\n}\n\nfragment MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsListContainerSearchServiceTicketsFields on ServiceTicketsSearchResult {\n  serviceTicketsResults {\n    ...MemberServiceTicketsListContainerSearchServiceTicketsResultFields\n  }\n  count\n  facets {\n    requestor {\n      value\n      count\n    }\n    assignedTo {\n      value\n      count\n    }\n    status {\n      value\n      count\n    }\n    priority {\n      value\n      count\n    }\n    requestorId {\n      value\n      count\n    }\n    assignedToId {\n      value\n      count\n    }\n  }\n}\n\nfragment MemberServiceTicketsListContainerSearchServiceTicketsResultFields on ServiceTicketsResult {\n  id\n  communityId\n  propertyId\n  title\n  requestor\n  assignedTo\n  requestorId\n  assignedToId\n  description\n  status\n  priority\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query MembersServiceTicketsListContainerServiceTicketsOpenByRequestor {\n  serviceTicketsOpenByRequestor {\n    ...MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields\n  }\n}\n\nquery MemberServiceTicketsListContainerSearchServiceTickets($input: ServiceTicketsSearchInput!) {\n  serviceTicketsSearch(input: $input) {\n    ...MembersServiceTicketsListContainerSearchServiceTicketsFields\n  }\n}\n\nfragment MembersServiceTicketsListContainerServiceTicketsOpenByRequestorFields on ServiceTicket {\n  title\n  requestor {\n    memberName\n  }\n  assignedTo {\n    memberName\n  }\n  priority\n  id\n  createdAt\n  updatedAt\n}\n\nfragment MembersServiceTicketsListContainerSearchServiceTicketsFields on ServiceTicketsSearchResult {\n  serviceTicketsResults {\n    ...MemberServiceTicketsListContainerSearchServiceTicketsResultFields\n  }\n  count\n  facets {\n    requestor {\n      value\n      count\n    }\n    assignedTo {\n      value\n      count\n    }\n    status {\n      value\n      count\n    }\n    priority {\n      value\n      count\n    }\n    requestorId {\n      value\n      count\n    }\n    assignedToId {\n      value\n      count\n    }\n  }\n}\n\nfragment MemberServiceTicketsListContainerSearchServiceTicketsResultFields on ServiceTicketsResult {\n  id\n  communityId\n  propertyId\n  title\n  requestor\n  assignedTo\n  requestorId\n  assignedToId\n  description\n  status\n  priority\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberNameServiceTicketContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersNameServiceTicketContainerFields\n  }\n}\n\nquery MemberServiceTicketCustomViews($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nmutation MemberServiceTicketSearchContainerCustomViewsUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...MembersServiceTicketCustomViewsMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketCustomViewsMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nfragment MembersNameServiceTicketContainerFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketCustomViewsFields on Member {\n  id\n  customViews {\n    id\n    name\n    type\n    filters\n    sortOrder\n    columnsToDisplay\n    createdAt\n    updatedAt\n  }\n}'
): (typeof documents)['query MemberNameServiceTicketContainer($communityId: ID!) {\n  membersByCommunityId(communityId: $communityId) {\n    ...MembersNameServiceTicketContainerFields\n  }\n}\n\nquery MemberServiceTicketCustomViews($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nmutation MemberServiceTicketSearchContainerCustomViewsUpdate($input: MemberUpdateInput!) {\n  memberUpdate(input: $input) {\n    ...MembersServiceTicketCustomViewsMutationResultFields\n  }\n}\n\nfragment MembersServiceTicketCustomViewsMutationResultFields on MemberMutationResult {\n  status {\n    success\n    errorMessage\n  }\n  member {\n    ...MembersServiceTicketCustomViewsFields\n  }\n}\n\nfragment MembersNameServiceTicketContainerFields on Member {\n  id\n  memberName\n}\n\nfragment MembersServiceTicketCustomViewsFields on Member {\n  id\n  customViews {\n    id\n    name\n    type\n    filters\n    sortOrder\n    columnsToDisplay\n    createdAt\n    updatedAt\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query MemberSiteCurrentMemberHasAdminRole($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    role {\n      roleName\n    }\n  }\n}'
): (typeof documents)['query MemberSiteCurrentMemberHasAdminRole($communityId: ObjectID!) {\n  memberForCurrentUser(communityId: $communityId) {\n    role {\n      roleName\n    }\n  }\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query AdminCommunitiesDropdownContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunitiesDropdownContainerCommunityFields\n  }\n}\n\nfragment AdminCommunitiesDropdownContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'
): (typeof documents)['query AdminCommunitiesDropdownContainerCommunity($id: ID!) {\n  communityById(id: $id) {\n    ...AdminCommunitiesDropdownContainerCommunityFields\n  }\n}\n\nfragment AdminCommunitiesDropdownContainerCommunityFields on Community {\n  name\n  domain\n  whiteLabelDomain\n  handle\n  id\n  createdAt\n  updatedAt\n}'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: 'query LoggedInUserContainerUserCurrentQuery {\n  userCurrent {\n    ...LoggedInUserContainerUserCurrentFields\n  }\n}\n\nfragment LoggedInUserContainerUserCurrentFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}'
): (typeof documents)['query LoggedInUserContainerUserCurrentQuery {\n  userCurrent {\n    ...LoggedInUserContainerUserCurrentFields\n  }\n}\n\nfragment LoggedInUserContainerUserCurrentFields on CurrentUser {\n  id\n  externalId\n  firstName\n  lastName\n  __typename\n}'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<
  infer TType,
  any
>
  ? TType
  : never;
